<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_array_8h_source">
<title>array.h</title>
<indexterm><primary>include/array.h</primary></indexterm>
<programlisting>00001 <emphasis role="preprocessor">#ifndef&#32;_ARRAY_H_</emphasis>
00002 <emphasis role="preprocessor">#define&#32;_ARRAY_H_</emphasis>
00003 
00004 <emphasis role="preprocessor">#include&#32;&lt;fstream&gt;</emphasis>&#32;&#32;
00005 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>&#32;&#32;&#32;
00006 <emphasis role="preprocessor">#include&#32;&lt;math.h&gt;</emphasis>&#32;&#32;&#32;
00007 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>&#32;&#32;&#32;
00008 <emphasis role="preprocessor">#include&#32;&lt;assert.h&gt;</emphasis>&#32;
00010 <emphasis role="keyword">using&#32;namespace&#32;</emphasis>std;
00011 
<anchor xml:id="_array_8h_source_1l00021"/><link linkend="_classArray">00021</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classArray">Array</link>
00022 {
00023 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vector&#32;&lt;long&#32;double&gt;&#32;datos;&#32;
00026 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classArray">Array</link>();
00038 
00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~<link linkend="_classArray">Array</link>();
00044 
00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classArray">Array</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;n);
00063 
00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classArray">Array</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;n,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;f);
00086 
00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classArray">Array</link>(<emphasis role="keyword">const</emphasis>&#32;vector&#32;&lt;long&#32;double&gt;&#32;&amp;v);
00104 
00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classArray">Array</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classArray">Array</link>&#32;&amp;v);
00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classArray">Array</link>&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classArray">Array</link>&#32;&amp;v);
00139 
00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classArray">Array</link>&#32;&#32;operator+(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classArray">Array</link>&#32;&amp;v);
00159 
00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classArray">Array</link>&#32;&#32;operator-(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classArray">Array</link>&#32;&amp;v);
00179 
00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classArray">Array</link>&#32;&#32;operator*(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classArray">Array</link>&#32;&amp;v);
00199 
00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classArray">Array</link>&#32;&amp;v);
00222 
00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;operator[](<emphasis role="keywordtype">int</emphasis>&#32;i)&#32;<emphasis role="keyword">const</emphasis>;
00244 
00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&amp;&#32;operator[](<emphasis role="keywordtype">int</emphasis>&#32;i);
00269 
00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;Tamanio()&#32;<emphasis role="keyword">const</emphasis>;
00288 
00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;Limpiar();
00308 &#32;&#32;&#32;&#32;
00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;NormaInfinito();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00325 
00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;istream&amp;&#32;operator&gt;&gt;(istream&#32;&amp;entrada,&#32;<link linkend="_classArray">Array</link>&#32;&amp;v);&#32;&#32;
00346 
00372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;ostream&amp;&#32;operator&lt;&lt;(ostream&#32;&amp;salida,&#32;<link linkend="_classArray">Array</link>&#32;&amp;v);&#32;&#32;&#32;
00373 };
00374 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
